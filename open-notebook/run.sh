#!/bin/bash

# ==============================================================================
# Home Assistant Add-on: Open Notebook Interface
# This script ONLY maps Home Assistant configuration to Open Notebook
# It does NOT modify the original Open Notebook code
# ==============================================================================

echo "=========================================="
echo "🚀 Open Notebook Interface v2.0.3"
echo "📦 Using Original Open Notebook (unmodified)"
echo "⏰ $(date '+%Y-%m-%d %H:%M:%S')"
echo "=========================================="

# Step 1: Create directories for Home Assistant integration
echo "📁 Creating Home Assistant directories..."
mkdir -p /config/open-notebook/{data,notebooks,uploads,exports}
mkdir -p /share/open-notebook/{documents,podcasts,models}
mkdir -p /app/logs
echo "✅ Directories created"

# Step 2: Set permissions
echo "🔐 Setting permissions..."
chmod -R 755 /config/open-notebook
chmod -R 755 /share/open-notebook
chmod -R 755 /app/logs
echo "✅ Permissions set"

# Step 3: Function to read Home Assistant configuration
read_config() {
    local key="$1"
    local default="$2"
    local value=""
    
    # Try bashio first
    if command -v bashio >/dev/null 2>&1; then
        value=$(bashio::config "$key" "$default" 2>/dev/null)
        if [[ -n "$value" && "$value" != "$default" ]]; then
            echo "$value"
            return
        fi
    fi
    
    # Fallback: try to read from options.json
    if [ -f "/data/options.json" ]; then
        value=$(python3 -c "
import json, sys
try:
    with open('/data/options.json') as f:
        data = json.load(f)
    result = data.get('$key', '$default')
    if result and result != '$default':
        print(result)
    else:
        print('$default')
except Exception as e:
    print('$default')
" 2>/dev/null)
        
        if [[ -n "$value" ]]; then
            echo "$value"
            return
        fi
    fi
    
    # Final fallback
    echo "$default"
}

# Step 4: Read Home Assistant configuration
echo "⚙️ Reading Home Assistant configuration..."

# Basic settings
DEBUG=$(read_config 'debug' 'false')
LOG_LEVEL=$(read_config 'log_level' 'INFO')
ENABLE_AUTH=$(read_config 'enable_auth' 'false')
AUTH_PASSWORD=$(read_config 'auth_password' '')

# AI API Keys
OPENAI_API_KEY=$(read_config 'openai_api_key' '')
ANTHROPIC_API_KEY=$(read_config 'anthropic_api_key' '')
GROQ_API_KEY=$(read_config 'groq_api_key' '')
GOOGLE_API_KEY=$(read_config 'google_api_key' '')
MISTRAL_API_KEY=$(read_config 'mistral_api_key' '')
DEEPSEEK_API_KEY=$(read_config 'deepseek_api_key' '')
OLLAMA_BASE_URL=$(read_config 'ollama_base_url' '')

echo "✅ Configuration loaded"

# Step 5: Count configured AI providers
echo "🤖 Checking AI providers..."
PROVIDER_COUNT=0

if [[ -n "${OPENAI_API_KEY}" && "${OPENAI_API_KEY}" != "" ]]; then
    echo "  ✅ OpenAI configured"
    PROVIDER_COUNT=$((PROVIDER_COUNT + 1))
fi

if [[ -n "${ANTHROPIC_API_KEY}" && "${ANTHROPIC_API_KEY}" != "" ]]; then
    echo "  ✅ Anthropic configured"
    PROVIDER_COUNT=$((PROVIDER_COUNT + 1))
fi

if [[ -n "${GROQ_API_KEY}" && "${GROQ_API_KEY}" != "" ]]; then
    echo "  ✅ Groq configured"
    PROVIDER_COUNT=$((PROVIDER_COUNT + 1))
fi

if [[ -n "${GOOGLE_API_KEY}" && "${GOOGLE_API_KEY}" != "" ]]; then
    echo "  ✅ Google AI configured"
    PROVIDER_COUNT=$((PROVIDER_COUNT + 1))
fi

if [[ -n "${MISTRAL_API_KEY}" && "${MISTRAL_API_KEY}" != "" ]]; then
    echo "  ✅ Mistral configured"
    PROVIDER_COUNT=$((PROVIDER_COUNT + 1))
fi

if [[ -n "${DEEPSEEK_API_KEY}" && "${DEEPSEEK_API_KEY}" != "" ]]; then
    echo "  ✅ DeepSeek configured"
    PROVIDER_COUNT=$((PROVIDER_COUNT + 1))
fi

if [[ -n "${OLLAMA_BASE_URL}" && "${OLLAMA_BASE_URL}" != "" ]]; then
    echo "  ✅ Ollama configured"
    PROVIDER_COUNT=$((PROVIDER_COUNT + 1))
fi

echo "🤖 Total providers: ${PROVIDER_COUNT}"

# Step 6: Create .env file for original Open Notebook
echo "📝 Creating .env for original Open Notebook..."

cd /app/open-notebook-src

cat > .env << EOF
# Generated by Home Assistant Add-on Interface
# This file maps HA configuration to original Open Notebook variables

# Security (original Open Notebook variable)
OPEN_NOTEBOOK_PASSWORD=${AUTH_PASSWORD}

# AI API Keys (original Open Notebook variables)
OPENAI_API_KEY=${OPENAI_API_KEY}
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
GROQ_API_KEY=${GROQ_API_KEY}
GOOGLE_API_KEY=${GOOGLE_API_KEY}
MISTRAL_API_KEY=${MISTRAL_API_KEY}
DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}

# Ollama (original Open Notebook variable)
OLLAMA_API_BASE=${OLLAMA_BASE_URL}

# Application settings
DEBUG=${DEBUG}
LOG_LEVEL=${LOG_LEVEL}

# Data directories (mapped to Home Assistant paths)
DATA_DIR=/config/open-notebook/data
NOTEBOOKS_DIR=/config/open-notebook/notebooks
UPLOADS_DIR=/config/open-notebook/uploads
EXPORTS_DIR=/config/open-notebook/exports
DOCUMENTS_DIR=/share/open-notebook/documents
PODCASTS_DIR=/share/open-notebook/podcasts
MODELS_DIR=/share/open-notebook/models
EOF

echo "✅ .env file created for original Open Notebook"

# Step 7: Show configuration summary
echo "📊 Configuration Summary:"
echo "  🔐 Authentication: ${ENABLE_AUTH}"
echo "  🤖 AI Providers: ${PROVIDER_COUNT} configured"
echo "  🐛 Debug: ${DEBUG}"
echo "  📝 Log Level: ${LOG_LEVEL}"
echo "  📁 Data: /config/open-notebook/"
echo "  📂 Shared: /share/open-notebook/"

# Step 8: Validate setup
if [[ ${PROVIDER_COUNT} -eq 0 ]]; then
    echo "=========================================="
    echo "⚠️ WARNING: No AI providers configured!"
    echo "=========================================="
    echo "Configure in: Supervisor → Add-on Store → Open Notebook → Configuration"
    echo ""
    echo "Example:"
    echo "  openai_api_key: \"sk-your-key\""
    echo "  anthropic_api_key: \"sk-ant-your-key\""
    echo ""
    echo "🔗 Get API keys:"
    echo "  • OpenAI: https://platform.openai.com/api-keys"
    echo "  • Anthropic: https://console.anthropic.com/"
    echo "  • Groq: https://console.groq.com/keys"
    echo "=========================================="
else
    echo "✅ ${PROVIDER_COUNT} AI provider(s) ready!"
fi

# Step 9: Set environment for original Open Notebook
export PYTHONPATH="/app/open-notebook-src"
export PYTHONUNBUFFERED=1

# Export all variables for the original application
export OPEN_NOTEBOOK_PASSWORD
export OPENAI_API_KEY
export ANTHROPIC_API_KEY
export GROQ_API_KEY
export GOOGLE_API_KEY
export MISTRAL_API_KEY
export DEEPSEEK_API_KEY
export OLLAMA_API_BASE
export DEBUG
export LOG_LEVEL

# Step 10: Start original Open Notebook via supervisor
echo "=========================================="
echo "🌟 Starting Original Open Notebook"
echo "📦 Repository: https://github.com/lfnovo/open-notebook"
echo "🔧 Interface: Home Assistant Add-on"
echo "=========================================="
echo "🌐 Streamlit: http://[HOST]:8501"
echo "⚡ FastAPI: http://[HOST]:8000"
echo "📁 Data: /config/open-notebook/"
echo "📂 Shared: /share/open-notebook/"
echo "=========================================="

echo "🚀 Launching original Open Notebook..."

# Change to Open Notebook source directory and start
cd /app/open-notebook-src
exec supervisord -c /app/supervisord.conf
